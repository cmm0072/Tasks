getwd ()
install.packages (readxl)
install.packages ("readxl")
library (readxl)
dataOne <- read.excel ('C:\\Users\\corey\\Desktop\\Evolution\\Tasks\\Task_07\\Mus1.xlsx')
dataOne <- read_excel ('C:\\Users\\corey\\Desktop\\Evolution\\Tasks\\Task_07\\Mus1.xlsx')
dataOne <- read_excel ('C:\\Users\\corey\\Desktop\\Evolution\\Tasks\\Task_07')
dataOne <- read_excel ('C:\\Users\\corey\\Desktop\\Evolution\\Tasks\\Task_07\\Mus1.xlsx')
dataOne <- read_excel (C:\\Users\\corey\\Desktop\\Evolution\\Tasks\\Task_07\\Mus1.xlsx)
dataOne <- read_excel ("C:\\Users\\corey\\Desktop\\Evolution\\Tasks\\Task_07\\Mus1.xlsx")
library(readxl)
Mus1 <- read_excel("Mus1.xls")
View(Mus1)
library(readxl)
Mus1 <- read_excel("Mus1.xls")
View(Mus1)
Mus1UsedData <- read_excel("Mus1UsedData.xlsx")
View(Mus1UsedData)
nge my hypothesis to mice that are pure bred (non hybrids) have more offspring than mixed bred (hybrids).'
#'For my graph, I would want number of offspring on the y axis and two groups, 'pure' and 'mixed' on the x axis. I would like the chart to have the large block with the error bars.'
#'For my simple analysis plan, I would like to prefrom a 2 sample variance test to see if variance is the same. If that pans out to be equal, then I want to do a one-tailed t-Test to see if the pure group have more offspring than the mixed group.'
#'
#'library (abe)
#'I want to change my hypothesis to mice that are pure bred (non hybrids) have more offspring than mixed bred (hybrids).'
#'For my graph, I would want number of offspring on the y axis and two groups, 'pure' and 'mixed' on the x axis. I would like the chart to have the large block with the error bars.'
#'For my simple analysis plan, I would like to prefrom a 2 sample variance test to see if variance is the same. If that pans out to be equal, then I want to do a one-tailed t-Test to see if the pure group have more offspring than the mixed group.'
#'
library (abe)
#'I want to change my hypothesis to mice that are pure bred (non hybrids) have more offspring than mixed bred (hybrids).'
#'For my graph, I would want number of offspring on the y axis and two groups, 'pure' and 'mixed' on the x axis. I would like the chart to have the large block with the error bars.'
#'For my simple analysis plan, I would like to prefrom a 2 sample variance test to see if variance is the same. If that pans out to be equal, then I want to do a one-tailed t-Test to see if the pure group have more offspring than the mixed group.'
#'
install.packages(abe)
#'I want to change my hypothesis to mice that are pure bred (non hybrids) have more offspring than mixed bred (hybrids).'
#'For my graph, I would want number of offspring on the y axis and two groups, 'pure' and 'mixed' on the x axis. I would like the chart to have the large block with the error bars.'
#'For my simple analysis plan, I would like to prefrom a 2 sample variance test to see if variance is the same. If that pans out to be equal, then I want to do a one-tailed t-Test to see if the pure group have more offspring than the mixed group.'
#'
install.packages(ape)
library (abe)
#'I want to change my hypothesis to mice that are pure bred (non hybrids) have more offspring than mixed bred (hybrids).'
#'For my graph, I would want number of offspring on the y axis and two groups, 'pure' and 'mixed' on the x axis. I would like the chart to have the large block with the error bars.'
#'For my simple analysis plan, I would like to prefrom a 2 sample variance test to see if variance is the same. If that pans out to be equal, then I want to do a one-tailed t-Test to see if the pure group have more offspring than the mixed group.'
#'
install.packages('ape')
library (abe)
library (phytools)
install.packages(phytools)
install.packages('phytools')
library (phytools)
text.string <-
"(((((((cow, pig), whale), (bat, (lemur, human))), (robin, iguana)), coalacanth), (goldfish, trout)), shark);"
vert.tree <- read.tree (text=text.string)
plot (vert.tree, edge.width=2)
nodelabels (frame="circle", bg='white', cex=1)
#'Question 1, goldfish is closer related to humans than sharks are.'
vert.tree
#'Question 2, there are no branch lengths in this tree.'
str (vert.tree)
tree <- read.tree (text= "(((A,B), (C,D)), E);")
plotTree (tree,offset = 1)
tiplabels (frame="circle", bg='lightblue', cex=1)
nodelabels (frame = "circle". bg ='white', cex=1)
nodelabels (frame = "circle", bg ='white', cex=1)
tree$tip.label
AnolisTree <- force.ultrametric (read.tree (https://jonsmitchell.com/data/anolis.tre"))
AnolisTree <- force.ultrametric (read.tree (https:/jonsmitchell.com/data/anolis.tre"))
AnolisTree <- force.ultrametric (read.tree ("https://jonsmitchell.com/data/anolis.tre"))
AnolisTree <- force.ultrametric (read.tree ("https://jonsmitchell.com/data/anolis.tre"))
par (las=1)
hist (AnolisTree$edge [,2] <= Ntip (AnolisTree))
hist (AnolisTree$edge.length, col='black', border='white', main="", xlab="edge lengths for Anolis tree", ylim=c (0, 50), xlim = c (0,6)))
hist (AnolisTree$edge.length, col='black', border='white', main="", xlab="edge lengths for Anolis tree", ylim=c (0, 50), xlim = c (0,6))
tipEdges <- which (AnolisTree$edge [,2] <= Ntip (AnolisTree))
Lengths <- AnolisTree$edge.length
names (Lengths) <- AnolisTree$tip.label
names (Lengths) [which (Lengths == min (Lengths))]
plot (AnolisTree, cex=0.25)
Labs <- sapply (AnolisTree$edge.length, round, digits=2)
edgelabels (text=Labs, cex=0.25)
?plot.phylo
plot (vert.tree, edge.width=2)
plot (vert.tree, edge.width=2, show.tip.label = FALSE)
?plot.phylo
#'Question 4, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE, rotate.tree = "radical")
#'Question 3, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE)
#'Question 4, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE, rotate.tree = "radical")
#'Question 4, code below'
plot.circular (vert.tree, edge.width=2, show.tip.label = FALSE)
install.packages ('circlize')
library (circlize)
#'Question 4, code below'
plot.circular (vert.tree, edge.width=2, show.tip.label = FALSE)
?plot.phylo
#'Question 4, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE, rotate.tree = "fan")
?plot.phylo
#'Question 4, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE, type = "fan")
?plot.phylo
?plot.phylo
#'Question 5, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
#'Question 6-8, code below'
smallestEdge <- which (AnolisTree$edge)
#'Question 6-8, code below'
smallestEdge <- which (AnolisTree$edge [,1])
?plot.phylo
#'Question 5, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
tree <- read.tree (text= "(((A,B), (C,D)), E);", show.tip.label = FALSE, type = "fan")
tree <- read.tree (text= "(((A,B), (C,D)), E);", show.tip.label = FALSE, type = "fan")
tree <- read.tree (text= "(((A,B), (C,D)), E);")
Q <- read.tree (text= "(((A,B), (C,D)), E);", show.tip.label = FALSE, type = "fan")
Q
plot (Q)
#'Question 3, code below'
plot (AnolisTree, edge.width=2, show.tip.label = FALSE)
#'Question 4, code below'
plot (vert.tree, edge.width=2, show.tip.label = FALSE, type = "fan")
#'Question 3, code below'
plot (AnolisTree, edge.width=2, show.tip.label = FALSE)
#'Question 4, code below'
plot (AnolisTree, edge.width=2, show.tip.label = FALSE, type = "fan")
#'Question 5, code below'
plot (AnolisTree, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
#'Question 6-8, code below'
smallEdge <- which (AnolisTree$edge.length [,1])
#'Question 6-8, code below'
smallEdge <- which (AnolisTree$edge.length, [,1])
#'Question 6-8, code below'
smallEdge <- which (AnolisTree$edge.length, [,2])
#'Question 6-8, code below'
smallEdge <- which (AnolisTree$edge.length [,2])
#'Question 6-8, code below'
Lengths2 <- (which (AnolisTree$edge [,2] <= Ntip (AnolisTree)))
#'Question 6-8, code below'
TipEdge2 <- (which (AnolisTree$edge [,2] <= Ntip (AnolisTree)))
Lengths2 <- AnolisTree$edge.length
smallEdge <- [which (Lengths == min (Lengths))]
smallEdge <- which (Lengths == min (Lengths))
smallEdge
edge.detach (AnolisTree 82)
drop.tip (AnolisTree, trim.internal = TRUE, subtree = TRUE, root.edge = 0)
drop.tip (AnolisTree, tip, trim.internal = TRUE, subtree = TRUE, root.edge = 0)
drop.tip (AnolisTree, 82, trim.internal = TRUE, subtree = TRUE, root.edge = 0)
plot (AnoloisTree)
plot (AnolisTree)
plot (AnolisTree, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
AmolisTree2 <- drop.tip (AnolisTree, 82, trim.internal = TRUE, subtree = TRUE, root.edge = 0)
plot (AnolisTree2, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
AnolisTree2 <- drop.tip (AnolisTree, 82, trim.internal = TRUE, subtree = TRUE, root.edge = 0)
plot (AnolisTree2, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
AnolisTree2
AnolisTree
plot (AnolisTree, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
AnolisTree2 <- drop.tip (AnolisTree, tip = 82, trim.internal = TRUE, subtree = TRUE, root.edge = 0)
plot (AnolisTree2, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
AnolisTree2 <- drop.tip (AnolisTree, 82, trim.internal = TRUE, subtree = TRUE, root.edge = 0)
plot (AnolisTree2, edge.width=2, show.tip.label = FALSE, type = "fan", edge.color = "red")
