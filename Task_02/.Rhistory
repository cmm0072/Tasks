q()
q()
q()
install.packages("swirl")
library (swirl)
q()
q()
library (swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c (1.1, 9, 3.14)
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt (z-1)
?
print the contents of my_sqrt
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_
my_div
library swirl
swirl ()
getwd ()
ls ()
x <- 9
ls ()
dir ()
?list.files
args ()
args (list.files())
args (list.files)
old.dir
n
help
old.dir <- getwd ()
dir.create (testdir)
dir.create (testdir)
dir.create(testdir)
dir.create ()
dir.create ("testdir")
setwd ("testdir")
file.create("mytest.R")
ls ()
list.files ()
file.exists()
file.exists ("mytest.R")
file.info ("mytest.R")
file.rename ("mytest2,R")
file.rename ("mytest.R" to "mytest2.R")
file.rename ("mytest.R to mytest2.R")
help
file.rename ("mytest.R", "mytest2.R")
file.copy ("mytest2.R", "mytest3.R")
file.path ("mytest3.R")
help
file.path ("folder1", "folder2")
?dir.create
dir.create ("testdir2")
dir.create (file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd (old.dir)
bye()
q()
swirl ()
library swirl
library (swirl)
swirl ()
1:20
pi:10
15:1
?':'
seq (1,20)
seq(0,10, by=0.5)
my_seq <- seq (5, 10, length=30)
length ()
length (my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep (0, times = 40)
rep (c(0,1,2), times = 10)
rep(x(0,1,2), each = 10)
rep(c(0,1,2), each = 10)
0
quir
quit
bye()
swirl ()
bye ()
swirl ()
x <- c(44,NA, 5, NA)
x * 3
y <- rnorm (1000)
z <- rep(NA, 1000)
my_data <- sample (c(y,z), 100)
my_na <- is.na (my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x(1:10)
help
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
help
c(3,5,7)
[c(3,5,7)]
help
info ()
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c (2,10)]
vect <- c (foo = 11, bar = 2, norf = NA)
vect
names (vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names (vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
Vect[“bar’]
vect[“bar”]
vect["bar"]
vect[c("foo", "bar")]
bye ()
swirl ()
my_vector <- 1:20
my_vector
dim(my_vector)
length (my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes (my_vector)
my_vector
class (my_vector)
my_matrix <- my_vector
?matrix ()
?matrix
my_matrix2 <- matrix (1:20, 4, 5)
identical (my_matrix, my_matrix2)
hekpo
help
patients <- c(Bill, Gina, Kelly, and Sean)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- "Bill", "Gina", "kelly", "Sean"
patients <- c("Bill", "Gina", "kelly", "sean")
patients <- c("Bill", "Gina", "kelly", "Sean")
patients <- c("Bill", "Gina", "kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(data.frame)
(my_data) <- cnames
colnames(my_data) <- cnames)
colnames(my_data) <- cnames
mydata
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !== 7
5 != 7
5 !== 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
bye ()
q()
library (swirl)
swirl ()
Sys.Date ()
The mean() function takes a vector of numbers as input, and returns the
| average of all of the numbers in the input vector.
mean (c (2,4,5))
submit (x)
help
submit ()
submit (boring_function <- function () {x})
submit (boring_function <- function () {x})
submit (boring_function <- function (x) {x})
submit (boring_function <- function (x)
submit ()
stoo
submit ()
boring_function ('My first function!')
boring_function
submit ()
submit ()
my_mean (c (4, 5, 10))
num %% divisor
submit ()
submit ()
remainder (5)
remainder (11, 5)
remainder (divisor = 11, num = 5)
remainder (4, div = 2)
args (remainder)
submit ()
evaluate (sd, c (1.4, 3.6, 7.9, 8.8))
(x) {x+1}, 6)
evaluate (function (x) {x+1}, 6)
evaluate (function (x) {x[1]}, c (8, 4, 0))
evaluate (function (x) {x[length(x)]}, c (8, 4, 0))
?paste
paste ("Programing", "is", "fun!")
paste("Programming", "is", "fun!")
submit ()
submit ()
telegram (c ("Hi", "Dr. Mitchell", "How", "Are", You"))
submit ()
help
stop
fvkdsf
telegram
bye ()
telegram (c ("Hi", "Dr. Mitchell", "How", "Are", You"))
telegram (c ("Hi", "Dr Mitchell"))
submit ()
mad_lips (place = "West Virginia", adjective = "smart", noun = "man")
mad_lips (place = "West Virginia", adjustive = "smart", noun = "man")
mad_lips (place = "west virginia", adjustive = "smart", noun = "man")
mad_lips (place = "London", adjustive = "beautiful", noun = "dog")
mmad_lips (place = "Beckley", adjustive = "smart", noun = "man")
mad_lips (place = "Beckley", adjustive = "smart", noun = "man")
mad_lips(place = "Beckley", adjustive = "smart", noun = "man")
mad_lips (place = "Beckley", adjective = "smart", noun = "man")
mad_lips (adjective = "smart", place = "Beckley", noun = "man")
submit ()
submit ()
submit ()
submit ()
submit ()
"I" %p% "love" %p% "R!"
data (cars)
?cars
head (cars)
plot (cars)
?plot ()
?plot
plot (x = cars$speed, y = cars$dist)
plot (x = cars$dist, y = cars$speed)
plot (x = cars$speed, y = cars$dist)
plot (x = cars$speed, y = cars$dist, xlab = "Speed")
plot (x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot (x = "Speed", y = "Stopping Distance")
plot (x = Speed, y = Stopping Distance)
plot (x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot (cars, man = "My Plot")
plot(cars, main = "My Plot")
plot (cars, sub = "My Plot Subtitle")
plot (cars, col = 2)
plot (cars, xlim = c (10, 15))
pch = 2
plot (cars, pch = 2
heko
plot (cars, pch = 2
help
plot(cars, pch = 2)
data.frame_mtcars
data (mtcars)
?boxplot
boxplot (formula = mpg ~ cyl, data = mtcars)
hist (mtcars$mpg)
swirl ()
bye ()
getwd ()
swirl ()
bye ()
q ()
setwd('C:\\Users\\USER\\Desktop\\Evolution\\Tasks\\Task_02')
getwd()
Data <- read.csv('http://jonsmitchell.com/data/beren.csv' , stringsAsFactors=F)
write.csv (Data, 'rawdata.csv', quote=F)
length (Data)
nrow (Data)
ncol (Data)
colnames (Data)
#'The data found here are the columns of the matrix. So, we have time data - event data, etc.'
head (Data)
Data [1,]
Data [2,]
Data [1:3,]
Data [1:3, 4]
Data [1:5, 1:3]
#'I played around with this a bit, after running through the code. It seems as tho, the first value is for the rows and the second is for the columns when there is two. When you only add one value, it gives all the columns and just the number of rows equal to the value you put in'
#'I am not entirely sure how I would go about getting to the 257th observation. I need to come to your office.'
Feeds <- which (Data[,9] == 'bottle')
berenMilk <- Data[Feeds ,]
head (berenMilk)
#'Each row represents a date and the amount of oz of milk beren drank on the corresponding date along with the caregiver that gave him the milk.'
Feeds <- which (Data[,'event'] == 'bottle')
Feeds <- which (Data$event == 'bottle')
dayID <- apply (Data, 1, function (x) paste (x[1:3], colapse ='-'))
dateID <- sapply (dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data$age <- dateID - dateID[which (Data$event == 'birth')]
setwd('C:\\Users\\USER\\Desktop\\Evolution\\Tasks\\Task_02')
getwd()
Data <- read.csv('http://jonsmitchell.com/data/beren.csv' , stringsAsFactors=F)
write.csv (Data, 'rawdata.csv', quote=F)
length (Data)
nrow (Data)
ncol (Data)
colnames (Data)
#'The data found here are the columns of the matrix. So, we have time data - event data, etc.'
head (Data)
Data [1,]
Data [2,]
Data [1:3,]
Data [1:3, 4]
Data [1:5, 1:3]
#'I played around with this a bit, after running through the code. It seems as tho, the first value is for the rows and the second is for the columns when there is two. When you only add one value, it gives all the columns and just the number of rows equal to the value you put in'
#'I am not entirely sure how I would go about getting to the 257th observation. I need to come to your office.'
Feeds <- which (Data[,9] == 'bottle')
berenMilk <- Data[Feeds ,]
head (berenMilk)
#'Each row represents a date and the amount of oz of milk beren drank on the corresponding date along with the caregiver that gave him the milk.'
Feeds <- which (Data[,'event'] == 'bottle')
Feeds <- which (Data$event == 'bottle')
dayID <- apply (Data, 1, function (x) paste (x[1:3], colaspe ='-'))
dateID <- sapply (dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data$age <- dateID - dateID[which (Data$event == 'birth')]
q()
